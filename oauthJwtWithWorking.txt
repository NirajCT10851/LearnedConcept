morning 31/12/2021
oath-server
1) start.spring.io -> new project -> web + eureka-client

2) import into IDE
server.port=9000
spring.application.name=oauth-serve

3) add dependency : spring-cloud-oauth2

<dependency>
   <groupId>org.springframework.cloud</groupId>
   <artifactId>spring-cloud-starter-oauth2</artifactId>
   <version>2.2.5.RELEASE</version>
</dependency>

4) add code for AuthorizationServer

a)
in main method
 @Override
   public void configure(ClientDetailsServiceConfigurer clients) throws Exception {
      clients.inMemory()
            .withClient("candy")
            .secret("{noop}123")
            .accessTokenValiditySeconds(90000)
            .authorizedGrantTypes("client_credentials")
            .scopes("read", "write");
   }

   @Override
   public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {
      endpoints.tokenStore(tokenStore()).accessTokenConverter(jwtAccessTokenConverter());
   }


   @Bean
   public DefaultTokenServices defaultTokenServices() {
      DefaultTokenServices defaultTokenServices = new DefaultTokenServices();
      defaultTokenServices.setTokenStore(tokenStore());
      return defaultTokenServices;
   }

   @Bean
   public TokenStore tokenStore() {
      return new JwtTokenStore(jwtAccessTokenConverter());
   }


   @Bean
   public JwtAccessTokenConverter jwtAccessTokenConverter() {
      JwtAccessTokenConverter jwtAccessTokenConverter = new JwtAccessTokenConverter();
      jwtAccessTokenConverter.setSigningKey("123456789012345678901234567890AB"); // 32 characters long
      return jwtAccessTokenConverter;
   }
   
   
   http://candy:123@localhost:9000/oauth/token 
   
   -d
{
"grant_type":"client_credentials"
}   
   
   {"access_token":"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJyZWFkIiwid3JpdGUiXSwiZXhwIjoxNjQxMDE0NTg0LCJqdGkiOiI2NGViZjZiOC04N2Q2LTQ3MTctOWZjNS0xNzczOWJmY2VhNzIiLCJjbGllbnRfaWQiOiJjYW5keSJ9.-JGQxFOr2e0-m8AYLKtVNAp4c7HGJC2LiKwXLWKkDko","token_type":"bearer","expires_in":89999,"scope":"read write","jti":"64ebf6b8-87d6-4717-9fc5-17739bfcea72"}
   
   
 Adding dependency in api gateway
 1) comment zipkin
2) add:
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
    </dependency>
3) Add Code

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder;
import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;
import org.springframework.security.web.server.SecurityWebFilterChain;
import javax.crypto.spec.SecretKeySpec;
@Configuration
@EnableWebFluxSecurity
public class ResourceServerConfig {


    @Bean
    @Primary
    SecurityWebFilterChain sprSecurityWebFilterChain(ServerHttpSecurity httpSecurity) {
        httpSecurity.authorizeExchange()
                .anyExchange()
                .authenticated()
                .and()
                .oauth2ResourceServer()
                .jwt();
        return httpSecurity.build();
    }

    @Bean
    public ReactiveJwtDecoder jwtDecoder() {
        byte[] key = "123456789012345678901234567890AB".getBytes();
        SecretKeySpec originalKey = new SecretKeySpec(key, 0, key.length, "AES");
        return NimbusReactiveJwtDecoder.withSecretKey(originalKey).build();
    }
}


4) Start Eureka-Server, Apigateway and userms

5) hit userms url through Apigateway
curl http://localhost:8080/dummy456/users -v -H "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzY29wZSI6WyJyZWFkIiwid3JpdGUiXSwiZXhwIjoxNjQxMDE4NTI3LCJqdGkiOiI5OTkyMzE4ZC1kMWIyLTQyZWQtYjM5Mi00ZTNjZGIyYjM2MjAiLCJjbGllbnRfaWQiOiJjYW5keSJ9.U7Idp5yDUwtRYPMcXgkVV082hlTRRtw3EqwwC2yn72Q"


--------------
--creating resource server and client-resource server
and connecting both intenal jwt authentication

1) start.spring.io -> two projects -> resource-server + resource-server-client
2) add code for both of them
3) hit from browser: http://localhost:9091/hello



1)resource server

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-oauth2-resource-server</artifactId>
</dependency>
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-web</artifactId>
</dependency>


server.port=8087
spring.application.name=resource-server

in  main
a)@RestController
b)@GetMapping("/hello")
   public String getHello() {
      return "Hello World!";
   }
 
 
 
 
 
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.oauth2.server.resource.OAuth2ResourceServerConfigurer;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import javax.crypto.spec.SecretKeySpec;
@Configuration
public class ResourceServerConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity httpSecurity) throws Exception {
        httpSecurity.authorizeRequests()
                .anyRequest()
                .authenticated()
                .and()
                .oauth2ResourceServer(OAuth2ResourceServerConfigurer::jwt);
    }

    @Bean
    public JwtDecoder jwtDecoder() {
        byte[] key = "123456789012345678901234567890AB".getBytes();
        SecretKeySpec originalKey = new SecretKeySpec(key, 0, key.length, "AES");
        return NimbusJwtDecoder.withSecretKey(originalKey).build();
    }
}
 



2)resource-server-client

<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-oauth2-client</artifactId>
</dependency>
<dependency>
   <groupId>org.springframework.boot</groupId>
   <artifactId>spring-boot-starter-webflux</artifactId>
</dependency>


server.port=9091
spring.application.name=resource-server-client
 
in  main
a)@RestController
b)@Autowired
   private WebClient webClient;
   @GetMapping("/hello")
   public Mono getHello() {
      return webClient.get()
            .uri("http://localhost:8087/hello")
            .retrieve()
            .bodyToMono(String.class);
   }




import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.oauth2.client.registration.ClientRegistration;
import org.springframework.security.oauth2.client.registration.InMemoryReactiveClientRegistrationRepository;
import org.springframework.security.oauth2.client.registration.ReactiveClientRegistrationRepository;
import org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction;
import org.springframework.security.oauth2.client.web.server.UnAuthenticatedServerOAuth2AuthorizedClientRepository;
import org.springframework.security.oauth2.core.AuthorizationGrantType;
import org.springframework.security.web.server.SecurityWebFilterChain;
import org.springframework.web.reactive.function.client.WebClient;
@Configuration
@EnableWebFluxSecurity
public class Oauth2ClientConfig {
    @Bean
    @Primary
    SecurityWebFilterChain sprSecurityWebFilterChain(ServerHttpSecurity httpSecurity) {
        httpSecurity.authorizeExchange()
                .anyExchange()
                .permitAll();
        return httpSecurity.build();
    }

    @Bean
    public ReactiveClientRegistrationRepository clientRegistrationRepository() {
        ClientRegistration clientRegistration = ClientRegistration.withRegistrationId("test-client")
                .authorizationGrantType(AuthorizationGrantType.CLIENT_CREDENTIALS)
                .clientId("candy")
                .clientSecret("123")
                .tokenUri("http://localhost:9000/oauth/token")
                .build();
        return new InMemoryReactiveClientRegistrationRepository(clientRegistration);
    }

    @Bean
    public WebClient webClient(ReactiveClientRegistrationRepository clientRegistrationRepository) {
        ServerOAuth2AuthorizedClientExchangeFilterFunction oauth = new ServerOAuth2AuthorizedClientExchangeFilterFunction(clientRegistrationRepository, new UnAuthenticatedServerOAuth2AuthorizedClientRepository());
        oauth.setDefaultClientRegistrationId("test-client");
        return WebClient.builder()
                .filter(oauth)
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();
    }

}
 
 
 --keycloak
 
 https://github.com/misbaharchitect/microservice/blob/main/citustech/security/keycloak-setup.txt
 
 
   
   