
1) What Is Spring Cloud?


Spring Cloud provides tools for developers to quickly build some of the common patterns in distributed systems (e.g. configuration management, service discovery, circuit breakers, intelligent routing, micro-proxy, control bus, one-time tokens, global locks, leadership election, distributed sessions, cluster state).

Spring Cloud focuses on providing good out of box experience for typical use cases and extensibility mechanism to cover others.

1) Service registration and discovery -- eureka server
2) Load balancing -- @loadbalance 
3) Circuit Breakers -- hstricx
4) Routing -- api gateway
5) Service-to-service calls

6) Distributed/versioned configuration
7) Global locks
8) Leadership election and cluster state
9) Distributed messaging


2) What is discovery server? Why there is a need of discovery server? How to set up discovery server?
	--> what is discovery server === 
				Service discovery is the process of automatically detecting devices and services on a network.
			Why there is a need of discovery server? == 
				Dymanic mapping for url in cloud base distributed project.
			How to set up discovery server?	
					 1) to create seperate ms with eureka server dependency 
							<dependency>
								<groupId>org.springframework.cloud</groupId>
								<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
							</dependency>

						2) we need to add   @EnableEurekaServer in main class 
						3)  eureka.client.register-with-eureka=false
							eureka.client.fetch-registry=false      	they are in false in eureka server   oterwise by default they true 
							
							client.serviceUrl=
							client.defaultZone= http://${eureka.instance.hostname}:${server.port}/eureka/   by defalut it is in 8761 but if we want to change the port for that we use defaultzone...
						4) 	@EnableDiscoveryClient  it is behave like a client.

3) Monolithic Apps vs Microservices. What are the advantages of microservices?

		Monolithic is tigtly coupled and ms is looesly coupled.
			Deployemnt --    simple and fast deployment 						--         requires distinct resouces
			scalable  --     it is hearder to maintain and handle new changes 	--    	   each element can be scalable independently without downtime
			testing    --    End-to-end testing 								-- 			Independent components need to be tested individually
			Resiliency   --    one bug or isuue can affect the whole system 	-- 			A faluer in one ms does not effect the other 
			security    --  	Communication wothin a single unit make data processing secure   -----    independent comminication req API 																							gateway raising security issue
			
4) What are the challenges faced while using Microservices?
			--  =>First, communication between services can be complex.
				=>Second, debugging becomes more challenging with microservices. 
				=>And third, while unit testing may be easier with microservices, integration testing is not. The components are distributed, and developers can’t test an entire system from their individual machines.
				=>Up-front costs may be higher with microservices.   
						storage increase 
					=>  	
					
5) How independent micro-services communicate with each other?
				1) RESTtemplate 
							--   //approch 1 other than traditional
									@Bean
									@LoadBalanced//used from where need to call other ms
									public RestTemplate restTemplate() {
									   return new RestTemplate();
									}

									//Acces can be based on application name not with url maunally
									restTemplate.getForObject("http://orderms/orders", List.class);

									//approch 2 other than traditionalnew RestTemplate();
																			}
		
				2) FeignClient 
				
				
				
								FeignClient:
										<dependency>
											<groupId>org.springframework.cloud</groupId>
											<artifactId>spring-cloud-starter-openfeign</artifactId>
										</dependency>

										@EnableFeignClients


										import java.util.List;
										@FeignClient("orderms") // Eureka-Discovered Name

public interface OrdermsFeignClient {
    @RequestMapping(
            value = "/orders",
            method= RequestMethod.GET,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
   
   
}

.........................................................
import com.edu.userms.OrdermsFeignClient;

@RestController
@RequestMapping("/")
public class UserResourceFeignClient {

    private final OrdermsFeignClient feignClient;
//    @Autowired //Not-Mandatory
    public UserResourceFeignClient(OrdermsFeignClient feignClient) {
        this.feignClient = feignClient;
    }

    @GetMapping("/feign-orders")
    public  List<OrderTO> callOrderms() {
        System.out.println("calling orderms");
        List<OrderTO> orderTOList = feignClient.getAllOrders();
        return orderTOList;
    }
	
	
	

6) Principles/characteristics of microservices?
				Interface segregation
				Deployability (is on you)
				Event-driven
				Availability over consistency
				Loose coupling
				Single responsibility
				
				
				
7) What is config server and why do we need it? How to implement it?
			https://github.com/NirajCT10851/LearnedConcept/blob/main/projectforProject/config-server-setup.txt

8) What is API gateway? Explain advantages of API gateway.
		An API stands for Application Program Interface. It is a set of instructions, protocols, and tools for building software applications. It specifies how software components should interact.

		The API Gateway is a server. It is a single entry point into a system. API Gateway encapsulates the internal system architecture. It provides an API that is tailored to each client. It also has other responsibilities such as authentication, monitoring, load balancing, caching, request shaping and management, and static response handling.

		API Gateway is also responsible for request routing, composition, and protocol translation. All the requests made by the client go through the API Gateway. After that, the API Gateway routes requests to the appropriate microservice.



	Advantage of API gate way ----
									The most important advantage of API Gateway is that it encapsulates the internal structure of the application.
									Rather than invoking the specific service, the client directly talks to the API Gateway.
									It simplifies the client code.
									It reduces coding efforts, makes the application more efficient, decreases errors all at the same time.
									It provides each kind of client with a specific API.


9) Why do we need hystrix? How to implement it? How to implement Hystrix Dashboard?
			
			How to implement Hystrix Dashboard?
			-----
			1) Add Hystrix starter and dashboard dependencies.
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-hystrix</artifactId>
			</dependency>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-starter-hystrix-dashboard</artifactId>
			</dependency>
			2) Add @EnableCircuitBreaker annotation
			3) Add @EnableHystrixDashboard annotation
			4) Add annotation @HystrixCommand(fallbackMethod = "myFallbackMethod")

10) What are different ways to deploy microservices?

		--
		Multiple Service Instances per Host Pattern
One way to deploy your microservices is to use the Multiple Service Instances per Host pattern. When using this pattern, you provision one or more physical or virtual hosts and run multiple service instances on each one. In many ways, this the traditional approach to application deployment.
				
				
				Service Instance per Host Pattern-->
							1) Service Instance per Virtual Machine Pattern
							2) Service Instance per Container Pattern
							
							for more info ....
							https://www.nginx.com/blog/deploying-microservices/#:~:text=One%20way%20to%20deploy%20your,traditional%20approach%20to%20application%20deployment.
		
11) What is Domain Driven Design?  

12) How to implement Distributed tracing in microservices? Why need of distributed tracing?   => Explain zipkin server  
		---  Distributed tracing, sometimes called distributed request tracing, is a method to monitor applications built on a microservices architecture.
		
		 This allows them to pinpoint bottlenecks, bugs, and other issues that impact the application’s performance.
		 
		 benifits of zipkin server 
				--Increased productivity:  Locating and fixing sources of errors also becomes more efficient.
				--Better cross-team collaboration:   when determining where an error occurred and who was responsible for correcting it.
				--Flexible implementation:  Distributed tracing tools work with a wide variety of applications and programming languages, so developers can incorporate them into virtually any microservices system and view data through one tracing application.
				
				
				=>  What is Jaeger or Zipkin tracing?

Jaeger and Zipkin are two popular open-source request tracing tools, each with similar components: a collector, datastore, query API, and web user interface. 
				
